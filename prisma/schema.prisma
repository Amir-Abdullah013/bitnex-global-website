// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phone         String?
  password      String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?

  // Profile settings
  country       String?
  timezone      String?  @default("UTC")

  // Security settings
  twoFactorEnabled    Boolean @default(false)
  emailNotifications  Boolean @default(true)
  smsNotifications    Boolean @default(false)
  loginAlerts         Boolean @default(true)

  // Notification settings
  priceAlerts            Boolean @default(true)
  tradeNotifications     Boolean @default(true)
  depositNotifications   Boolean @default(true)
  withdrawalNotifications Boolean @default(true)
  marketingEmails        Boolean @default(false)
  securityAlerts         Boolean @default(true)

  // Referral system fields
  referralCode     String?  @unique // User's unique referral code (e.g., BNX123)
  referredBy       String?  // Referral code of the user who referred this user
  referralLevel    Int?     @default(0) // Level in referral hierarchy (0 = no referrer, 1 = direct, 2 = indirect, etc.)
  referralEarnings Float   @default(0) // Total earnings from referrals

  // Relations
  wallet         Wallet?
  transactions   Transaction[]
  notifications  Notification[]
  createdNotifications Notification[] @relation("NotificationCreator")
  supportTickets SupportTicket[]
  auditLogs      AuditLog[]
  adminLogs      AdminLog[]
  depositRequests DepositRequest[]
  stakings       Staking[]
  sentTransfers     Transfer[] @relation("SentTransfers")
  receivedTransfers Transfer[] @relation("ReceivedTransfers")
  orders         Order[]
  trades         Trade[] @relation("BuyerTrades")
  sellTrades     Trade[] @relation("SellerTrades")
  portfolio      Portfolio?
  investments    Investment[]
  
  // Referral relations
  referrals      Referral[] @relation("ReferrerReferrals") // Users referred by this user
  referredUsers  Referral[] @relation("ReferredUser") // Users who referred this user
  referrer       User?      @relation("UserReferrer", fields: [referredBy], references: [referralCode])
  referredByUsers User[]    @relation("UserReferrer") // Users who were referred by this user
  referralRewards ReferralReward[] // Rewards earned from referrals
  referralTransactionsFrom ReferralTransaction[] @relation("ReferralTransactionFrom") // Transactions triggered by this user
  referralTransactionsTo   ReferralTransaction[] @relation("ReferralTransactionTo") // Transactions received by this user

  @@map("users")
}

model Wallet {
  id         String   @id @default(cuid())
  userId     String   @unique
  balance    Float    @default(0)        // USD balance
  bnxBalance Float   @default(0)        // BNX token balance
  currency   String   @default("USD")
  lastUpdated DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  type      TransactionType
  amount    Float
  currency  String            @default("USD")
  status    TransactionStatus @default(PENDING)
  gateway   String?
  description String?         // Optional description
  screenshot String?          // Path to uploaded screenshot
  binanceAddress String?      // Binance address for manual deposits/withdrawals
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  isGlobal  Boolean            @default(false)  // For admin notifications to all users
  createdBy String?            // Admin who created the notification
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  creator User? @relation("NotificationCreator", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model SupportTicket {
  id        String           @id @default(cuid())
  userId    String
  subject   String
  messages  Json
  status    TicketStatus     @default(OPEN)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model Price {
  id            String   @id @default(cuid())
  tradingPairId String?
  symbol        String
  price         Float
  volume        Float?
  marketCap     Float?
  timestamp     DateTime @default(now())
  source        String?

  // Relations
  tradingPair TradingPair? @relation(fields: [tradingPairId], references: [id], onDelete: SetNull)

  @@map("prices")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model DepositRequest {
  id              String            @id @default(cuid())
  userId          String
  amount          Float
  screenshot      String            // Path to uploaded screenshot
  binanceAddress String            // Binance address used for deposit
  status          TransactionStatus @default(PENDING)
  adminNotes      String?          // Admin notes for approval/rejection
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposit_requests")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_resets")
}

model TokenStats {
  id               String   @id @default(cuid())
  totalTokens      Float    @default(100000000) // 100M BNX tokens
  totalInvestment  Float    @default(350000)     // Initial investment: 350,000 USD
  currentPrice     Float    @default(0.0035)    // Initial price: 0.0035 USD
  lastUpdated      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("token_stats")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  BUY
  SELL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ALERT
}

enum NotificationStatus {
  READ
  UNREAD
}

enum TicketStatus {
  OPEN
  CLOSED
}

model Staking {
  id            String        @id @default(cuid())
  userId        String
  amountStaked  Float
  durationDays  Int
  rewardPercent Float
  startDate     DateTime
  endDate       DateTime
  status        StakingStatus @default(ACTIVE)
  claimed       Boolean       @default(false)
  rewardAmount  Float?        // Calculated reward amount
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staking")
}

enum StakingStatus {
  ACTIVE
  COMPLETED
  CLAIMED
  CANCELLED
}

model Transfer {
  id              String        @id @default(cuid())
  senderId        String
  recipientId     String
  senderEmail     String
  recipientEmail  String
  amount          Float
  note            String?
  status          TransferStatus @default(COMPLETED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  sender    User @relation("SentTransfers", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation("ReceivedTransfers", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("transfers")
}

enum TransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  tradingPairId String
  type          OrderType
  side          OrderSide
  amount        Float       // Amount of base asset tokens
  price         Float?      // Price per token (null for market orders)
  filledAmount  Float       @default(0) // Amount that has been filled
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  filledAt      DateTime?   // When the order was completely filled

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingPair TradingPair @relation(fields: [tradingPairId], references: [id], onDelete: Cascade)
  trades      Trade[]     @relation("OrderTrades")

  @@map("orders")
}

model Trade {
  id            String   @id @default(cuid())
  orderId       String
  tradingPairId String
  buyerId       String
  sellerId      String
  amount        Float    // Amount of tokens traded
  price         Float    // Price per token
  totalValue    Float    // Total value (amount * price)
  buyerFee      Float    @default(0) // Fee paid by buyer
  sellerFee     Float    @default(0) // Fee paid by seller
  totalFees     Float    @default(0) // Total fees collected
  createdAt     DateTime @default(now())

  // Relations
  order       Order       @relation("OrderTrades", fields: [orderId], references: [id], onDelete: Cascade)
  tradingPair TradingPair @relation(fields: [tradingPairId], references: [id], onDelete: Cascade)
  buyer       User        @relation("BuyerTrades", fields: [buyerId], references: [id], onDelete: Cascade)
  seller      User        @relation("SellerTrades", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("trades")
}

model TradingPair {
  id              String   @id @default(cuid())
  symbol          String   @unique // e.g., "BNX/USDT", "BTC/USDT", "ETH/USDT"
  baseAsset       String   // e.g., "BNX", "BTC", "ETH"
  quoteAsset      String   // e.g., "USDT", "USD"
  isActive        Boolean  @default(true)
  minOrderSize    Float    @default(0.001)
  maxOrderSize    Float    @default(1000000)
  pricePrecision  Int      @default(4)
  amountPrecision Int      @default(4)
  makerFee        Float    @default(0.001) // 0.1% maker fee
  takerFee        Float    @default(0.001) // 0.1% taker fee
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  orders      Order[]
  trades      Trade[]
  marketData  MarketData[]
  prices      Price[]
  feeStructure FeeStructure? @relation(fields: [feeStructureId], references: [id])
  feeStructureId String?

  @@map("trading_pairs")
}

model MarketData {
  id            String   @id @default(cuid())
  tradingPairId String
  tradingPair   TradingPair @relation(fields: [tradingPairId], references: [id])
  price         Float
  volume24h     Float    @default(0)
  change24h     Float    @default(0)
  high24h       Float
  low24h        Float
  marketCap     Float?
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("market_data")
}

enum OrderType {
  MARKET
  LIMIT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  REJECTED
}

model FeeStructure {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  
  // Trading fees
  makerFee    Float    @default(0.001) // 0.1% default
  takerFee    Float    @default(0.001) // 0.1% default
  
  // Withdrawal fees
  withdrawalFees Json // { "BTC": 0.0005, "ETH": 0.01, "USDT": 1.0 }
  
  // Deposit fees (usually 0)
  depositFees Json // { "BTC": 0.0, "ETH": 0.0, "USDT": 0.0 }
  
  // Minimum fees
  minTradingFee    Float @default(0.0001)
  minWithdrawalFee  Float @default(0.0001)
  
  // Fee caps
  maxTradingFee     Float?
  maxWithdrawalFee  Float?
  
  // Status
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tradingPairs TradingPair[]
  
  @@map("fee_structures")
}

model Portfolio {
  id              String   @id @default(cuid())
  userId          String   @unique
  totalValue      Float    @default(0) // Total portfolio value in USD
  totalPnl        Float    @default(0) // Total profit/loss
  totalPnlPercent Float    @default(0) // Total P&L percentage
  totalFees       Float    @default(0) // Total fees paid
  totalTrades     Int      @default(0) // Total number of trades
  winRate         Float    @default(0) // Win rate percentage
  avgTradeSize    Float    @default(0) // Average trade size
  bestTrade       Float    @default(0) // Best single trade profit
  worstTrade      Float    @default(0) // Worst single trade loss
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings        PortfolioHolding[]
  analytics       PortfolioAnalytics[]
  
  @@map("portfolios")
}

model PortfolioHolding {
  id          String   @id @default(cuid())
  portfolioId String
  asset       String   // Asset symbol (BTC, ETH, USDT, etc.)
  amount      Float    @default(0) // Amount held
  avgPrice    Float    @default(0) // Average purchase price
  currentPrice Float   @default(0) // Current market price
  value       Float    @default(0) // Current value (amount * currentPrice)
  pnl         Float    @default(0) // Profit/Loss for this holding
  pnlPercent  Float    @default(0) // P&L percentage
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, asset])
  @@map("portfolio_holdings")
}

model PortfolioAnalytics {
  id          String   @id @default(cuid())
  portfolioId String
  date        DateTime @default(now())
  totalValue  Float    @default(0)
  totalPnl    Float    @default(0)
  totalPnlPercent Float @default(0)
  dailyTrades Int      @default(0)
  dailyVolume Float    @default(0)
  dailyFees   Float    @default(0)
  createdAt   DateTime @default(now())
  
  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, date])
  @@map("portfolio_analytics")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  event       String
  level       String
  description String
  metadata    Json     @default("{}")
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([event])
  @@index([level])
  @@index([timestamp])
  @@map("audit_logs")
}

// Investment Plans Models
model InvestmentPlan {
  id                String   @id @default(cuid())
  planName          String
  minimumInvestment Float
  maximumInvestment Float
  profitPercentage  Float
  duration          Int      // in days
  description       String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  investments       Investment[]
  
  @@map("investment_plans")
}

model Investment {
  id              String   @id @default(cuid())
  userId          String
  planId          String
  investedAmount  Float
  startDate       DateTime @default(now())
  endDate         DateTime
  expectedReturn  Float
  actualReturn    Float?
  status          InvestmentStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            InvestmentPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([startDate])
  @@map("investments")
}

enum InvestmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

// OTP and Password Reset Models
model Otp {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  
  @@map("otps")
}

// Referral System Models
model Referral {
  id            String   @id @default(cuid())
  referrerId    String   // User who made the referral
  referredId    String   // User who was referred
  referralCode  String   // Referral code used
  level         Int      // Level in hierarchy (1 = direct, 2 = indirect, etc.)
  status        ReferralStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  referrer      User     @relation("ReferrerReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
  referred      User     @relation("ReferredUser", fields: [referredId], references: [id], onDelete: Cascade)
  rewards       ReferralReward[]

  @@unique([referrerId, referredId])
  @@map("referrals")
}

model ReferralReward {
  id            String   @id @default(cuid())
  userId        String   // User who earned the reward
  referralId    String?  // Associated referral
  amount        Float    // Reward amount
  percentage    Float    // Commission percentage applied
  sourceType    RewardSourceType // What action triggered the reward
  sourceId      String?  // ID of the source transaction/action
  level         Int      // Level in referral chain (1-4)
  status        RewardStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  referral      Referral? @relation(fields: [referralId], references: [id], onDelete: SetNull)

  @@map("referral_rewards")
}

enum ReferralStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RewardSourceType {
  DEPOSIT
  TRADE
  INVESTMENT
  STAKING
}

enum RewardStatus {
  PENDING
  PAID
  CANCELLED
}

model ReferralTransaction {
  id        String   @id @default(cuid())
  fromUserId String  // User who triggered the reward
  toUserId   String  // User who received the reward
  amount     Float   // Reward amount
  level      Int     // Level in referral chain
  createdAt  DateTime @default(now())

  // Relations
  fromUser   User    @relation("ReferralTransactionFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User    @relation("ReferralTransactionTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("referral_transactions")
}


