// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phone         String?
  password      String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?

  // Profile settings
  country       String?
  timezone      String?  @default("UTC")

  // Security settings
  twoFactorEnabled    Boolean @default(false)
  emailNotifications  Boolean @default(true)
  smsNotifications    Boolean @default(false)
  loginAlerts         Boolean @default(true)

  // Notification settings
  priceAlerts            Boolean @default(true)
  tradeNotifications     Boolean @default(true)
  depositNotifications   Boolean @default(true)
  withdrawalNotifications Boolean @default(true)
  marketingEmails        Boolean @default(false)
  securityAlerts         Boolean @default(true)

  // Relations
  wallet         Wallet?
  transactions   Transaction[]
  notifications  Notification[]
  createdNotifications Notification[] @relation("NotificationCreator")
  supportTickets SupportTicket[]
  adminLogs      AdminLog[]

  @@map("users")
}

model Wallet {
  id         String   @id @default(cuid())
  userId     String   @unique
  balance    Float    @default(0)        // USD balance
  tikiBalance Float   @default(0)        // TIKI token balance
  currency   String   @default("USD")
  lastUpdated DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  type      TransactionType
  amount    Float
  status    TransactionStatus @default(PENDING)
  gateway   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  isGlobal  Boolean            @default(false)  // For admin notifications to all users
  createdBy String?            // Admin who created the notification
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  creator User? @relation("NotificationCreator", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model SupportTicket {
  id        String           @id @default(cuid())
  userId    String
  subject   String
  messages  Json
  status    TicketStatus     @default(OPEN)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model Price {
  id        String   @id @default(cuid())
  symbol    String
  price     Float
  volume    Float?
  marketCap Float?
  timestamp DateTime @default(now())
  source    String?

  @@map("prices")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  hashedOtp String
  expiry    DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_resets")
}

model TokenStats {
  id               String   @id @default(cuid())
  totalTokens      Float    @default(100000000) // 100M TIKI tokens
  totalInvestment  Float    @default(350000)     // Initial investment: 350,000 USD
  currentPrice     Float    @default(0.0035)    // Initial price: 0.0035 USD
  lastUpdated      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("token_stats")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  BUY
  SELL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ALERT
}

enum NotificationStatus {
  READ
  UNREAD
}

enum TicketStatus {
  OPEN
  CLOSED
}

